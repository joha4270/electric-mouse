@model electric_mouse.Models.RouteViewModels.RouteCreateViewModel
@using electric_mouse.Models.RouteItems;
@{
	var strings = ViewBag.Language.Strings;
}

@* enctype="multipart/form-data" is for getting all the image files *@
<form asp-controller="Route" asp-action="@(Model.UpdateID < 0 ? "Create" : "Update")" method="post" class="col s12" id="route_form" 
      enctype="multipart/form-data">
  <input asp-for="UpdateID" value="@Model.UpdateID" type="hidden" />
  <div class="row">
    <div class="input-field col s2">
      <input type="number" min="1" name="RouteID" value="@Model.RouteID" />
      <label for="id">@strings["Route_Name"] ID</label>
    </div>
    <div class="input-field col s10">
      <select asp-for="RouteHallID"  id="hallSelect">
        @if (Model.UpdateID < 0)
        {
	        <option value="" disabled selected>@strings["Hall_Select"]</option>
        }
        @foreach (RouteHall hall in Model.Halls)
        {
	        <option value ="@hall.RouteHallID" data-guess="@(hall.ExpectedType.HasValue ? (int)hall.ExpectedType.Value : -1)">@hall.Name</option>
        }
      </select>
      <label>@strings["Route_Hall"]</label>
    </div>
  </div>

  <div class="row">
    <div class="input-field col s6">
      <select asp-for="RouteDifficultyID" asp-items="@Model.Difficulties.Select(d => new SelectListItem { Text = d.Name, Value = d.RouteDifficultyID.ToString() }) ">
        @if (Model.UpdateID < 0)
        {
	        <option value="" disabled selected>@strings["Difficulty_Select"]</option>
        }
      </select>
      <label>@strings["Route_Difficulty"]</label>
    </div>
    <div class="input-field col s6">
      <select asp-for="Type" id="TypeSelect">
        <option value="0">Boulder</option>
        <option value="1">Sport</option>
      </select>
      <label>@strings["Route_Type"]</label>
    </div>
  </div>

  <div class="row">
    <div class="input-field col s12">
      <select asp-for="RouteSectionID" asp-items="@(Model.UpdateID > 0 ? Model.Sections
          .Where(x => x.RouteHallID == Model.RouteHallID)
          .Select(s => new SelectListItem { Text = s.Name, Value = s.RouteSectionID.ToString() }) : new SelectListItem[] { })" id="SectionSelect" multiple>
        <option value="" disabled selected>@strings["Sections_None"]</option>
      </select>
      <label for="sections">@strings["Route_Section"]</label>
    </div>
  </div>

  <div class="row">
    <div class="input-field col s12">
      <label for="date">@strings["Route_Date"]</label>
      <input type="date" class="datepicker" name="Date" value="@Model.Date">
    </div>
  </div>

  <div class="row">
    <div class="input-field col s12">
      <input id="grip_color" type="text" name="GripColor" value="@Model.GripColor">
      <label for="grip_color">@strings["Route_Grip_Color"]</label>
    </div>
  </div>

  <div class=row>
    <div class="col s12">
      <div class="input-field">
        <label for="search_input">@strings["Route_Builders"]</label>
        <input type="text" id="search_input" />
        <div id="builder_container"></div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col s12">
        <h5>@strings["Route_Attachments"]</h5>
        <div class="input-field col s12">
            <input type="text" name="VideoUrl"  value="@Model?.Attachment?.VideoUrl"/>
            <label asp-for="VideoUrl">YouTube Video</label>
            <input asp-for="AttachmentID" value="@Model?.Attachment?.RouteAttachmentID" type="hidden" />
        </div>
    </div>
</div>



    @* IMAGE UPLOAD *@
  <div class="row">
    <div class="col s12">
      <p>@strings["Attachment_Upload_Image"]</p>
      <input type="file" name="Images" id="filer_input" multiple />


      @* Only display the image edit if in route edit *@
      @if (@Model.UpdateID > 0)
      {
	      <ul class="jFiler-items-list jFiler-items-grid">
	        @foreach (Tuple<string, int> image in Model.Images)
            {
				<li class="jFiler-item" id="@image.Item2">
				  <div class="jFiler-item-container">
					<div class="jFiler-item-inner">
					  <div class="jFiler-item-thumb">
						<img src="~/@image.Item1" />
					  </div>
					  <div class="jFiler-item-assets jFiler-row">
						<ul class="list-inline pull-right">
						  <li>
							<a href="javascript:void(0)" onclick="imageClicked('@image.Item2')" class="icon-jfi-trash jFiler-item-trash-action"></a>
						  </li>
						</ul>
					  </div>
					</div>
				  </div>
				</li>
            }
	      </ul>

		  @* This select is to send the images that the user wants to delete back to the server *@
	      <div id="hideSelect">
	        <select asp-for="ImagePathRelationID" multiple id="imageSelect"></select>
	      </div>
      }

    </div>
  </div>

    <div class="row">
    <div class="input-field col s12">
      <textarea id="textarea1" class="materialize-textarea" name="Note">@Model.Note</textarea>
      <label for="textarea1">@strings["Route_Note"]</label>
    </div>
  </div>

  <div class="row">
    <div class="col s12">
      <button class="btn waves-effect waves-light red right" type="submit">
        @strings["Create_Route_Button"]
        <i class="material-icons right">send</i>
      </button>
    </div>
  </div>
</form>

@section scripts {
    <script src="/js/filer.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/typeahead.js/0.11.1/typeahead.bundle.min.js"></script>
  <script src="/js/materialize-tags.js"></script>
  <script>
      var sections = {
          @foreach (var hall in Model.Halls)
          {
              @Html.Raw("'")@hall.RouteHallID@Html.Raw("': {")
              foreach (var s in Model.Sections.Where(i => i.RouteHallID == hall.RouteHallID))
              {
                  @Html.Raw("'")@s.RouteSectionID@Html.Raw("': '")@s.Name@Html.Raw("',")
              }
              @Html.Raw("},\n")
          }
      };

      $("#hallSelect")
	      .on('change',
		      function() {
			      var data = "";
			      var parent = $(this).val();
			      data += '<option value="" disabled selected>@strings["Sections_Select"]</option>';
			      $.each(sections[parent],
				      function(key, val) {
					      data += '<option value="' + key + '">' + val + '</option>';
				      });
			      if (data == "") {
				      data = '<option value="" disabled selected>@strings["Sections_None"]</option>'
			      }
			      $("#SectionSelect").material_select("destroy");
			      $("#SectionSelect").html(data);
			      $("#SectionSelect").material_select();
			      var guess = $(this).find("option:selected").attr('data-guess');
			      if (guess >= 0) {
				      $("#TypeSelect").val(guess);
				      $("#TypeSelect").material_select();
			      }

		      });

      var users = new Bloodhound({
	      datumTokenizer: function(datum) {
		      return Bloodhound.tokenizers.whitespace(datum.value);
	      },
	      queryTokenizer: Bloodhound.tokenizers.whitespace,
	      remote: {
		      wildcard: '%QUERY',
		      url: '/api/queryusers?query=%QUERY',
		      transform: function(response) {
			      return $.map(response,
				      function(result) {
					      return {
						      value: result.name,
						      image: result.imageUrl,
						      userid: result.userId
					      };
				      });
		      }
	      }
      });

      $("#search_input")
	      .materialtags({
			      itemValue: 'value',
			      itemText: 'value',
			      itemImage: 'image',
			      itemUserId: 'userId',
			      typeaheadjs: {
				      displayKey: 'value',
				      source: users,
				      templates: {
					      suggestion: function(item) {
						      return '<div class="tt-suggestion tt-selectable"><img src="' + item.image +'" class="left circle" /><span>' + item.value + '</span></div>';
					      }
				      }
			      }
		      }
	      );
      $("#search_input").on('itemRemoved', function(event) {
	      $(".tt-input").focus().select();
      });

      $("#route_form").submit(function(e) {
	      var self = this;
	      e.preventDefault();
	      var items = $("#search_input").materialtags('items');
	      var content = "";

	      $(items).each(function() {
		      content += '<input type="hidden" name="Builders[]" value="' + this.userid + '" />';
		      console.log(this.userid);
	      });
	      $("#builder_container").html(content);

	      self.submit();
	      return false; // fallback
      });

	  $("#route_form").bind('keypress keydown keyup', function(e){
	     if(e.keyCode == 13) { e.preventDefault(); }
	  });

      @foreach (ApplicationUser builder in Model.BuilderList)
      {
	      @Html.Raw("$(\"#search_input\").materialtags(\"add\",")
	      @Html.Raw("{")
	      @Html.Raw("image: \"")@builder.URLPath@Html.Raw("\",")
	      @Html.Raw("userid: \"")@builder.Id@Html.Raw("\",")
	      @Html.Raw("value: \"")@Html.Raw(@builder.DisplayName)@Html.Raw("\"")
	      @Html.Raw("});");
      }

      $(document).ready(function () {
          var select = document.getElementById('hideSelect');
          if (select != null)
              select.style.visibility = 'hidden';
      });

      function imageClicked(id) {
          var img = document.getElementById(id);
          img.style.display = 'none';

          var select = document.getElementById('imageSelect');
          var option = document.createElement("option");
          option.value = id;
          option.selected = "selected";
          select.add(option);
      }
  </script>
}
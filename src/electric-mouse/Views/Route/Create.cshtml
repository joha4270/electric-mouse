@model electric_mouse.Models.RouteViewModels.RouteCreateViewModel
@using electric_mouse.Models.RouteItems;
<h2>Stuff</h2>
<form asp-controller="Route" asp-action="@(Model.UpdateID < 0 ? "Create" : "Update")" method="post" class="col s12">
    <input asp-for="UpdateID" value="@Model.UpdateID" type="hidden" />
  <div class="row">
    <div class="input-field col s2">
      <input type="number" min="1" name="RouteID" value="@Model.RouteID" />
      <label for="id">Route ID</label>
    </div>
    <div class="input-field col s10">
      <select asp-for="RouteHallID"  id="hallSelect">
@if (Model.UpdateID < 0)
{
        <option value="" disabled selected>Select a Hall</option>
}
@foreach (RouteHall hall in Model.Halls)
{
    <option value ="@hall.RouteHallID" data-guess="@(hall.ExpectedType.HasValue ? (int)hall.ExpectedType.Value : -1)">@hall.Name</option>
}
      </select>
      <label>Hal</label>
    </div>
  </div>

  <div class="row">
    <div class="input-field col s6">
        <select asp-for="RouteDifficultyID" asp-items="@Model.Difficulties.Select(d => new SelectListItem { Text = d.Name, Value = d.RouteDifficultyID.ToString() }) ">
            @if (Model.UpdateID < 0)
            {
            <option value="" disabled selected>Select a Difficulity</option>
            }
        </select>
      <label>Difficulty</label>
    </div>
    <div class="input-field col s6">
      <select asp-for="Type" id="TypeSelect">
        <option value="0">Boulder</option>
        <option value="1">Sport</option>
      </select>
      <label>Route Type</label>
    </div>
  </div>

  <div class="row">
    <div class="input-field col s12">
      <select asp-for="RouteSectionID" asp-items="@(Model.UpdateID > 0 ? Model.Sections.Where(x => x.RouteHallID == Model.RouteHallID).Select(s => new SelectListItem { Text = s.Name, Value = s.RouteSectionID.ToString() }) : new SelectListItem[] { })" id="SectionSelect" multiple>
        <option value="" disabled selected>No Sections Found</option>
      </select>
      <label for="sections">Section</label>
    </div>
  </div>

  <div class="row">
    <div class="input-field col s12">
      <label for="date">Date</label>
      <input type="date" class="datepicker" name="Date" value="@Model.Date">
    </div>
  </div>

  <div class="row">
    <div class="input-field col s12">
      <input id="grip_color" type="text" name="GripColor" value="@Model.GripColor">
      <label for="grip_color">Grip Color</label>
    </div>
  </div>


  <div class=row>

@for (int i = 0; i < Model.Builders.Count; i++)
{
    <div data-userid="@Model.Builders[i]"class="valign-wrapper selected-user-display">
      <p class="valign">@Model.BuilderNames[i]<a class="waves-effect waves-light" onclick="removeBuilder('@Model.Builders[i]')">
          <i class="material-icons right">clear</i></a>
      </p>
      <input type="hidden" name="Builders[@i]" value="@Model.Builders[i]" /></div>
}
    <div id="builderscontainer" style="display: table;">
      <button type="button" id="btnaddbuilder" class="btn waves-effect waves-light red" style="display: table-row; height: 36px; ">
        Tilføj bygger
        <i class="material-icons right">add</i>
      </button>
      <div id="buildersearchwrapper" style="display: none;position: relative;">
        <div  class="input-field inline " style="margin-top: -1px;" >
          <input id="buildersearch" type="text" class="validate red" style="margin-bottom: 0px; height:36px">
          <label for="buildersearch" data-error="wrong" >Search</label>
        </div>
        <div id="searchcontainer" style="border: 2px solid black; background-color: white; position: absolute; left: inherit; width: 100%; z-index: 2000"></div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col s12">
      <p>Image & Video row</p>
    </div>
  </div>

  <div class="row">
    <div class="input-field col s12">
      <textarea id="textarea1" class="materialize-textarea" name="Note">@Model.Note</textarea>
      <label for="textarea1">Note</label>
    </div>
  </div>

  <div class="row">
    <div class="col s12">
      <button class="btn waves-effect waves-light red right" type="submit">
        Create Route
        <i class="material-icons right">send</i>
      </button>
    </div>
  </div>
</form>

@section scripts {

  <script>
      var sections = {
          @foreach (var hall in Model.Halls)
          {
              @Html.Raw("'")@hall.RouteHallID@Html.Raw("': {")
              foreach (var s in Model.Sections.Where(i => i.RouteHallID == hall.RouteHallID))
              {
                  @Html.Raw("'")@s.RouteSectionID@Html.Raw("': '")@s.Name@Html.Raw("',")
              }
              @Html.Raw("},\n")
          }
      };

      $("#hallSelect")
          .on('change',
              function() {
                  var data = "";
                  var parent = $(this).val();
                  data += '<option value="" disabled selected>Select a Section</option>';
                  $.each(sections[parent],
                      function(key, val) {
                          data += '<option value="' + key + '">' + val + '</option>';
                      });
                  if (data == "") {
                      data = '<option value="" disabled selected>No Sections Found</option>'
                  }
                  $("#SectionSelect").material_select("destroy");
                  $("#SectionSelect").html(data);
                  $("#SectionSelect").material_select();
                  var guess = $(this).find("option:selected").attr('data-guess');
                  if (guess >= 0) {
                      $("#TypeSelect").val(guess);
                      $("#TypeSelect").material_select();
                  }

              });

      $("#btnaddbuilder")
          .click(function() {
              $(this).hide();
              $("#buildersearchwrapper").show();
              $("#buildersearch").focus();
              $("#buildersearch").val("");
          });
      $("#buildersearch")
          .on('focusout',
              function() {
                  setTimeout(function() {
                          $("#buildersearchwrapper").hide();
                          $("#btnaddbuilder").show();
                      },
                      500);

              });

//Stolen from http://stackoverflow.com/a/32407093
// func       callback function
// wait       throttle time in ms
// immediate  bool, should callback be called on first event
      function debounce(func, wait, immediate) {
          var timeout;
          return function() {
              var context = this, args = arguments;
              var later = function() {
                  timeout = null;
                  if (!immediate) func.apply(context, args);
              };
              var callNow = immediate && !timeout;
              clearTimeout(timeout);
              timeout = setTimeout(later, wait);
              if (callNow) func.apply(context, args);
          };
      };

      var removeBuilder = function(guid) {
          $("[data-userid='" + guid + "']").remove();

      }

      var addBuilder = function(guid, name) {
          var sib = $("#builderscontainer").siblings().length;
          $(`<div data-userid="${guid}"class="valign-wrapper selected-user-display">
<p class="valign">${name}<a class="waves-effect waves-light">
  <i class="material-icons right">clear</i></a>
</p>
<input type="hidden" name="Builders[${sib}]" value="${guid}" /></div>`).insertBefore("#builderscontainer");
      };

      var querySearch = function(context) {
          var search = this.value;
          if ($.trim(search) != '') {
              $.ajax({
                  url: "/api/queryusers",
                  dataType: "json",
                  data: { query: search },
                  success: function(result) {
                      if (result.length > 0) {
                          var data = result.map(function(element) {
                                  return `<div class="user-display" data-userid="${element.userId}"><p><img src="${
                                      element.imageUrl}" height="32" width="32"></ img>${element.name}</ p></div>`;
                              })
                              .join("");
                          $("#searchcontainer").html(data);
                          var sel = $(".user-display");
                          $(sel[0]).addClass("blue");
                          sel.mouseenter(function() {
                              $(".user-display.blue").removeClass("blue");
                              $(this).addClass("blue");
                          });
                          sel.click(function() {
                              addBuilder($(this).attr("data-userid"), $(this).text());
                          });
                      } else {
                          $("#searchcontainer").html('<p>No results</ p>');
                      }
                  }
              });
          } else {
              $("#searchcontainer").html("");
          }
      }

      $("#buildersearch").keyup(debounce(querySearch, 200));


  </script>
}